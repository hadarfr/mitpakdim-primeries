// Generated by CoffeeScript 1.3.3
(function() {
  var root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = (_ref = window.mit) != null ? _ref : window.mit = {};

  root.JSONPSync = function(method, model, options) {
    options.dataType = "jsonp";
    return Backbone.sync(method, model, options);
  };

  root.MiscModel = (function(_super) {

    __extends(MiscModel, _super);

    function MiscModel() {
      return MiscModel.__super__.constructor.apply(this, arguments);
    }

    return MiscModel;

  })(Backbone.Model);

  root.Agenda = (function(_super) {

    __extends(Agenda, _super);

    function Agenda() {
      return Agenda.__super__.constructor.apply(this, arguments);
    }

    Agenda.prototype.defaults = {
      uservalue: 0
    };

    return Agenda;

  })(Backbone.Model);

  root.Member = (function(_super) {

    __extends(Member, _super);

    function Member() {
      return Member.__super__.constructor.apply(this, arguments);
    }

    Member.prototype.defaults = {
      score: 'N/A'
    };

    return Member;

  })(Backbone.Model);

  root.MemberAgenda = (function(_super) {

    __extends(MemberAgenda, _super);

    function MemberAgenda() {
      return MemberAgenda.__super__.constructor.apply(this, arguments);
    }

    MemberAgenda.prototype.urlRoot = "http://www.oknesset.org/api/v2/member-agendas/";

    MemberAgenda.prototype.url = function() {
      return MemberAgenda.__super__.url.call(this) + '/';
    };

    MemberAgenda.prototype.sync = root.JSONPSync;

    return MemberAgenda;

  })(Backbone.Model);

  root.LocalVarCollection = (function(_super) {

    __extends(LocalVarCollection, _super);

    function LocalVarCollection() {
      this.sync = __bind(this.sync, this);
      return LocalVarCollection.__super__.constructor.apply(this, arguments);
    }

    LocalVarCollection.prototype.initialize = function(models, options) {
      if (options != null ? options.localObject : void 0) {
        console.log("Using local objects for ", this);
        this.localObject = options.localObject;
      }
      if (options != null ? options.url : void 0) {
        return this.url = options.url;
      }
    };

    LocalVarCollection.prototype.sync = function(method, model, options) {
      var _this = this;
      if (this.localObject === void 0) {
        return this.syncFunc.apply(this, arguments);
      }
      setTimeout(function() {
        return options.success(_this.localObject, null);
      });
    };

    LocalVarCollection.prototype.syncFunc = Backbone.sync;

    LocalVarCollection.prototype.parse = function(response) {
      return response.objects;
    };

    return LocalVarCollection;

  })(Backbone.Collection);

  root.JSONPCollection = (function(_super) {

    __extends(JSONPCollection, _super);

    function JSONPCollection() {
      return JSONPCollection.__super__.constructor.apply(this, arguments);
    }

    JSONPCollection.prototype.syncFunc = root.JSONPSync;

    return JSONPCollection;

  })(root.LocalVarCollection);

  root.MemberList = (function(_super) {

    __extends(MemberList, _super);

    function MemberList() {
      return MemberList.__super__.constructor.apply(this, arguments);
    }

    MemberList.prototype.model = root.Member;

    MemberList.prototype.localObject = window.mit.members;

    MemberList.prototype.url = "http://www.oknesset.org/api/v2/member/";

    return MemberList;

  })(root.JSONPCollection);

  root.TemplateView = (function(_super) {

    __extends(TemplateView, _super);

    function TemplateView() {
      this.render = __bind(this.render, this);
      return TemplateView.__super__.constructor.apply(this, arguments);
    }

    TemplateView.prototype.template = function() {
      return _.template(this.get_template()).apply(null, arguments);
    };

    TemplateView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return TemplateView;

  })(Backbone.View);

  root.MemberView = (function(_super) {

    __extends(MemberView, _super);

    function MemberView() {
      return MemberView.__super__.constructor.apply(this, arguments);
    }

    MemberView.prototype.className = "member_instance";

    MemberView.prototype.get_template = function() {
      return $("#member_template").html();
    };

    return MemberView;

  })(root.TemplateView);

  root.ListViewItem = (function(_super) {

    __extends(ListViewItem, _super);

    function ListViewItem() {
      return ListViewItem.__super__.constructor.apply(this, arguments);
    }

    ListViewItem.prototype.tagName = "div";

    ListViewItem.prototype.get_template = function() {
      return "<a href='#'><%= name %></a>";
    };

    return ListViewItem;

  })(root.TemplateView);

  root.ListView = (function(_super) {

    __extends(ListView, _super);

    function ListView() {
      this.initEmptyView = __bind(this.initEmptyView, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);

      this.initialize = __bind(this.initialize, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.initialize = function() {
      var _base, _base1, _ref1, _ref2;
      root.TemplateView.prototype.initialize.apply(this, arguments);
      if ((_ref1 = (_base = this.options).itemView) == null) {
        _base.itemView = root.ListViewItem;
      }
      if ((_ref2 = (_base1 = this.options).autofetch) == null) {
        _base1.autofetch = true;
      }
      if (this.options.collection) {
        this.options.collection.bind("add", this.addOne);
        this.options.collection.bind("reset", this.addAll);
        if (this.options.autofetch) {
          return this.options.collection.fetch();
        }
      }
    };

    ListView.prototype.addOne = function(modelInstance) {
      var view;
      view = new this.options.itemView({
        model: modelInstance
      });
      modelInstance.view = view;
      return this.$el.append(view.render().$el);
    };

    ListView.prototype.addAll = function() {
      this.initEmptyView();
      return this.options.collection.each(this.addOne);
    };

    ListView.prototype.initEmptyView = function() {
      return this.$el.empty();
    };

    return ListView;

  })(root.TemplateView);

  root.DropdownItem = (function(_super) {

    __extends(DropdownItem, _super);

    function DropdownItem() {
      this.render = __bind(this.render, this);
      return DropdownItem.__super__.constructor.apply(this, arguments);
    }

    DropdownItem.prototype.tagName = "option";

    DropdownItem.prototype.render = function() {
      var json;
      json = this.model.toJSON();
      this.$el.html(json.name);
      this.$el.attr({
        value: json.id
      });
      return this;
    };

    return DropdownItem;

  })(Backbone.View);

  root.DropdownContainer = (function(_super) {

    __extends(DropdownContainer, _super);

    function DropdownContainer() {
      this.initEmptyView = __bind(this.initEmptyView, this);
      return DropdownContainer.__super__.constructor.apply(this, arguments);
    }

    DropdownContainer.prototype.tagName = "select";

    DropdownContainer.prototype.options = {
      itemView: root.DropdownItem
    };

    DropdownContainer.prototype.initEmptyView = function() {
      return this.$el.html("<option>-----</option>");
    };

    return DropdownContainer;

  })(root.ListView);

  root.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.calculate = __bind(this.calculate, this);

      this.reevaluateMembers = __bind(this.reevaluateMembers, this);

      this.partyChange = __bind(this.partyChange, this);

      this.initialize = __bind(this.initialize, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#app_root';

    AppView.prototype.initialize = function() {
      var _this = this;
      this.memberList = new root.MemberList;
      this.memberList.fetch();
      this.partyListView = new root.DropdownContainer({
        collection: new root.JSONPCollection(null, {
          model: root.MiscModel,
          url: "http://www.oknesset.org/api/v2/party/",
          localObject: window.mit.parties
        })
      });
      this.$(".parties").append(this.partyListView.$el);
      this.partyListView.$el.bind('change', this.partyChange);
      this.agendaListView = new root.ListView({
        collection: new root.JSONPCollection(null, {
          model: root.Agenda,
          url: "http://www.oknesset.org/api/v2/agenda/"
        }),
        itemView: (function(_super1) {

          __extends(_Class, _super1);

          function _Class() {
            this.onStop = __bind(this.onStop, this);
            return _Class.__super__.constructor.apply(this, arguments);
          }

          _Class.prototype.render = function() {
            _Class.__super__.render.call(this);
            this.$('.slider').slider({
              min: -100,
              max: 100,
              value: this.model.get("uservalue"),
              stop: this.onStop
            });
            return this;
          };

          _Class.prototype.onStop = function(event, ui) {
            return this.model.set({
              uservalue: ui.value
            });
          };

          _Class.prototype.get_template = function() {
            return $("#agenda_template").html();
          };

          return _Class;

        })(root.ListViewItem)
      });
      this.agendaListView.collection.on('change', function() {
        var recalc_timeout;
        console.log("Model changed", arguments);
        if (_this.recalc_timeout) {
          clearTimeout(_this.recalc_timeout);
        }
        return recalc_timeout = setTimeout(function() {
          _this.recalc_timeout = null;
          return _this.calculate();
        }, 100);
      });
      this.$(".agendas").append(this.agendaListView.$el);
      this.agendaListView.$el.bind('change', this.agendaChange);
      return this.$("input:button").click(this.calculate);
    };

    AppView.prototype.partyChange = function() {
      console.log("Changed: ", this, arguments);
      this.partyListView.options.selected = this.partyListView.$('option:selected').text();
      this.$('.agendas_container').show();
      return this.reevaluateMembers();
    };

    AppView.prototype.reevaluateMembers = function() {
      var _this = this;
      this.filteredMemberList = new root.MemberList(this.memberList.filter(function(object) {
        return object.get('party_name') === _this.partyListView.options.selected;
      }), {
        comparator: function(member) {
          return -member.get('score');
        }
      });
      this.memberListView = new root.ListView({
        collection: this.filteredMemberList,
        itemView: root.MemberView,
        autofetch: false
      });
      this.$(".members").empty().append(this.memberListView.$el);
      return this.memberListView.options.collection.trigger("reset");
    };

    AppView.prototype.calculate = function() {
      var agendasInput, calcs,
        _this = this;
      this.$(".members_container").hide();
      console.log("Calculate: ", this, arguments);
      agendasInput = {};
      this.agendaListView.collection.each(function(agenda) {
        return agendasInput[agenda.get('id')] = agenda.get("uservalue");
      });
      console.log("Agendas input: ", agendasInput);
      calcs = [];
      this.memberListView.collection.each(function(member) {
        return calcs.push(_this.calcOneAsync(member, agendasInput));
      });
      console.log("Waiting for " + calcs.length + " member agendas");
      return $.when.apply($, calcs).done(function() {
        console.log("Got results!", _this, arguments);
        _this.filteredMemberList.sort();
        return _this.$(".members_container").show();
      }).fail(function() {
        return console.log("Error getting results!", _this, arguments);
      });
    };

    AppView.prototype.calcOneAsync = function(member, agendasInput) {
      var calcOne, memberAgendas;
      calcOne = function() {
        return member.set('score', _.reduce(member.get('agendas'), function(memo, agenda) {
          return memo += agendasInput[agenda.id] * agenda.score;
        }, 0));
      };
      if (member.get('agendas')) {
        console.log('Already got agendas for ' + member.get('id'));
        calcOne();
        return $.Deferred().resolve();
      }
      memberAgendas = new root.MemberAgenda({
        id: member.get('id')
      });
      return memberAgendas.fetch({
        success: function() {
          member.set('agendas', memberAgendas.get('agendas'));
          return calcOne();
        }
      });
    };

    return AppView;

  })(Backbone.View);

  $(function() {
    root.appView = new root.AppView;
  });

}).call(this);
